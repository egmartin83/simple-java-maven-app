podTemplate(yaml: '''
    apiVersion: v1
    kind: Pod
    spec:
      containers:
      - name: maven
        image: maven:3.8.1-jdk-8
        command:
        - sleep
        args:
        - 99d
      - name: kaniko
        image: gcr.io/kaniko-project/executor:debug
        command:
        - sleep
        args:
        - 9999999
        volumeMounts:
        - name: kaniko-secret
          mountPath: /kaniko/.docker
      restartPolicy: Never
      volumes:
      - name: kaniko-secret
        secret:
            secretName: dockercred
            items:
            - key: .dockerconfigjson
              path: config.json
''') {

    node(POD_LABEL) {
        def gitcommit =  'Emiliano'         
        
        stage('VerificaciÃ³n SCM') {
   
               def VAR2 = 'Martin '
            
            script {
              checkout scm
              sh "git rev-parse --short HEAD > .git/commit-id"  
              gitcommit = readFile('.git/commit-id').trim()
              echo "${gitcommit}"  
            }
           
        }
        
        stage('Build Maven') {
             git url: 'https://github.com/egmartin83/simple-java-maven-app.git', branch: 'master'
            container('maven') {
                try{
                    stage('Build a Maven project') {
                        sh '''
                         mvn -B -DskipTests clean package
                         echo "This will run success"
                        '''
                    }
                } catch (e){
                   sh   'echo "This will run only if failed"'
                   throw e
                } finally {
                    sh 'echo "Archiving artifact"' 
                   def currentResult = currentBuild.result ?: 'SUCCESS'
                   sh  'echo ${currentResult}'
                   sh  'echo currentResult'
                   if (currentResult == 'SUCCESS') {
                        sh 'echo "Archiving...."'
                        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true 
                    }
                   sh 'echo "Archived artifact"'
                }     
            }
        }

        stage('Test') {
            //git url: 'https://github.com/hashicorp/terraform.git', branch: 'main'
            container('maven') {
               try{
                    stage('test') {
                        sh '''
                        mvn test
                        '''
                    }
               } catch(e){
                   sh   'echo "This will run only if failed"'
                   throw e
               }finally {
                    def currentResult = currentBuild.result ?: 'SUCCESS'
                    if (currentResult == 'SUCCESS') {
                        sh 'echo "Testing...."'
                        junit 'target/surefire-reports/*.xml'
                    }
               }
            }
        }
        
        stage("build & SonarQube analysis") {
          node {
              withSonarQubeEnv('sonarqube') {
                 sh 'mvn clean package sonar:sonar'
              }
          }
        }
        
       stage("Quality Gate"){
          timeout(time: 1, unit: 'HOURS') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
      }
        
        stage('Deliver') {
            container('maven') {
                stage('declu') {
                    sh '''
                    ./jenkins/scripts/deliver.sh
                    '''
                }
            }
        }
        
        stage('Build & Publish') {
            container('kaniko') {
                stage('Build a Go project') {
                    def command  =  "/kaniko/executor --context `pwd` --destination egmartin83/simple-java-maven-app:" + "${gitcommit}"
                    echo "${command}"
                    sh "${command}"  
                }
            }
        }

    }
}
